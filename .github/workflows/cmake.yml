name: "CMake build"

on:
  push:
  pull_request:
  workflow_call:
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  build:
    name: ${{ matrix.toolchain }} (MATIO_EXTENDED_SPARSE=${{ matrix.extended-sparse }}, MATIO_MAT73=${{ matrix.mat73 }}, MATIO_WITH_ZLIB=${{ matrix.with-zlib }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - linux-gcc
          - macos-clang
          - windows-msvc
          - windows-mingw
        configuration:
          - Release
        python-version:
          - 3.13
        extended-sparse:
          - ON
          - OFF
        mat73:
          - ON
          - OFF
        with-zlib:
          - ON
          - OFF
        include:
          - toolchain: linux-gcc
            os: ubuntu-latest
            compiler: gcc
          - toolchain: macos-clang
            os: macos-latest
            compiler: clang
          - toolchain: windows-msvc
            os: windows-latest
            compiler: msvc
          - toolchain: windows-mingw
            os: windows-latest
            compiler: mingw
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 5
          submodules: recursive
      - name: Setup python environment
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install python packages
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            echo "/Users/runner/Library/Python/${{ matrix.python-version }}/bin" >> $GITHUB_PATH
          fi
          pip install --disable-pip-version-check --user "conan>=2.16.1,<3"
      - name: Cache conan folder
        uses: actions/cache@v4
        with:
          path: ~/.conan2
          key: ${{ runner.os }}-conan2-${{ hashFiles('conanfile.txt', 'conanfile.py', 'conan.lock') }}
          restore-keys: |
            ${{ runner.os }}-conan2-
      - name: Configure (${{ matrix.configuration }})
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            echo "/Users/runner/Library/Python/${{ matrix.python-version }}/bin" >> $GITHUB_PATH
          fi
          if [ "${{ matrix.compiler }}" == "msvc" ]; then
            cmake -S . -B build -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES=conan_provider -DCONAN_BUILD_PROFILE="${{ github.workspace }}/.ci/conan_static_profile.cmake" -DMATIO_SHARED=OFF -DMATIO_EXTENDED_SPARSE=${{ matrix.extended-sparse }} -DMATIO_MAT73=${{ matrix.mat73 }} -DMATIO_WITH_ZLIB=${{ matrix.with-zlib }}
          elif [ "${{ matrix.compiler }}" == "mingw" ]; then
            cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES=conan_provider -DCONAN_HOST_PROFILE="default;auto-cmake;${{ github.workspace }}/.ci/conan_cppcheck_profile.cmake" -DMATIO_SHARED=OFF -DMATIO_ENABLE_CPPCHECK=ON -DMATIO_EXTENDED_SPARSE=${{ matrix.extended-sparse }} -DMATIO_MAT73=${{ matrix.mat73 }} -DMATIO_WITH_ZLIB=${{ matrix.with-zlib }} -G "MinGW Makefiles"
          elif [ "${{ matrix.compiler }}" == "gcc" ]; then
            cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES=conan_provider -DCONAN_BUILD_PROFILE="${{ github.workspace }}/.ci/conan_cppcheck_profile.cmake" -DMATIO_SHARED=OFF -DMATIO_ENABLE_CPPCHECK=ON -DMATIO_EXTENDED_SPARSE=${{ matrix.extended-sparse }} -DMATIO_MAT73=${{ matrix.mat73 }} -DMATIO_WITH_ZLIB=${{ matrix.with-zlib }}
          else
            cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES=conan_provider -DCONAN_HOST_PROFILE="default;auto-cmake;${{ github.workspace }}/.ci/conan_static_profile.cmake" -DMATIO_SHARED=OFF -DMATIO_EXTENDED_SPARSE=${{ matrix.extended-sparse }} -DMATIO_MAT73=${{ matrix.mat73 }} -DMATIO_WITH_ZLIB=${{ matrix.with-zlib }}
          fi
      - name: Build with ${{ matrix.compiler }}
        run: |
          if [ "${{ matrix.compiler }}" == "msvc" ]; then
            cmake --build build --config ${{ matrix.configuration }}
          else
            cmake --build build -- -j8
          fi
      - name: Test
        run: ctest --no-tests=error --test-dir build --build-config ${{ matrix.configuration }} --parallel 8

  build-openbsd:
    name: openbsd-clang
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 5
          submodules: recursive
      - name: Test with clang
        uses: vmactions/openbsd-vm@v1
        with:
          usesh: true
          copyback: false
          prepare: |
            set -e
            pkg_add cmake
          run: |
            set -e
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DMATIO_SHARED=OFF -DMATIO_MAT73=OFF
            cmake --build build -- -j8
            ctest --no-tests=error --test-dir build --build-config Release --parallel 8

  build-solaris:
    name: solaris-gcc
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 5
          submodules: recursive
      - name: Test with gcc
        uses: vmactions/solaris-vm@v1
        with:
          release: 11.4
          usesh: true
          copyback: false
          prepare: |
            set -e
            pkg install cmake gcc
          run: |
            set -e
            mkdir build
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DMATIO_SHARED=OFF -DMATIO_MAT73=OFF
            cmake --build build -- -j8
            ctest --no-tests=error --test-dir build --build-config Release --parallel 8

  build-cygwin:
    name: windows-cygwin
    runs-on: windows-latest
    steps:
      - name: Set git to use LF
        run: git config --global core.autocrlf input
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 5
      - name: Setup cygwin
        uses: cygwin/cygwin-install-action@master
        with:
          packages: >-
            cmake
            gcc-core
            gcc-g++
            libhdf5-devel
            make
            ninja
            zlib-devel
      - name: Configure
        run: |
          export PATH=/usr/bin:$PATH
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -G Ninja
        shell: C:\cygwin\bin\bash.exe -eo pipefail -o igncr '{0}'
      - name: Build with gcc
        run: |
          export PATH=/usr/bin:$PATH
          cmake --build build -- -j8
        shell: C:\cygwin\bin\bash.exe -eo pipefail -o igncr '{0}'
      - name: Test
        run: |
          for file in ./share/*.mat; do
            ./build/matdump -d "$file" d
            ./build/matdump -v "$file"
            ./build/matdump -v -f whos "$file"
          done
          ./build/matdump -v -H
          ./build/matdump -V
        shell: C:\cygwin\bin\bash.exe -eo pipefail -o igncr '{0}'
