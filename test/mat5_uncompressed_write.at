# Copyright (C) 2010-2016   Christopher C. Hulbert
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY CHRISTOPHER C. HULBERT ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL CHRISTOPHER C. HULBERT OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

AT_SETUP([Write 2D double-precision array])
AT_CHECK([$builddir/test_mat -v 5 -c double write_2d_numeric],[0],[],
         [])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 6 11 16 21 26 31 36 41 46 @&t@
2 7 12 17 22 27 32 37 42 47 @&t@
3 8 13 18 23 28 33 38 43 48 @&t@
4 9 14 19 24 29 34 39 44 49 @&t@
5 10 15 20 25 30 35 40 45 50 @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_2d_numeric_double.m],
[
try
    load test_write_2d_numeric.mat
    expdata = reshape(1:50,5,10);
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_double;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D single-precision array])
AT_CHECK([$builddir/test_mat -v 5 -c single write_2d_numeric],[0],[],
         [])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 6 11 16 21 26 31 36 41 46 @&t@
2 7 12 17 22 27 32 37 42 47 @&t@
3 8 13 18 23 28 33 38 43 48 @&t@
4 9 14 19 24 29 34 39 44 49 @&t@
5 10 15 20 25 30 35 40 45 50 @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_2d_numeric_single.m],
[
try
    load test_write_2d_numeric.mat
    expdata = single(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_single;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 64-bit integer array])
AT_SKIP_IF([test $HAVE_INT64 -eq 0])
AT_CHECK([$builddir/test_mat -v 5 -c int64 write_2d_numeric],[0],[],
         [])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 6 11 16 21 26 31 36 41 46 @&t@
2 7 12 17 22 27 32 37 42 47 @&t@
3 8 13 18 23 28 33 38 43 48 @&t@
4 9 14 19 24 29 34 39 44 49 @&t@
5 10 15 20 25 30 35 40 45 50 @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_2d_numeric_int64.m],
[
try
    load test_write_2d_numeric.mat
    expdata = int64(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 64-bit unsigned integer array])
AT_SKIP_IF([test $HAVE_UINT64 -eq 0])
AT_CHECK([$builddir/test_mat -v 5 -c uint64 write_2d_numeric],[0],[],
         [])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 6 11 16 21 26 31 36 41 46 @&t@
2 7 12 17 22 27 32 37 42 47 @&t@
3 8 13 18 23 28 33 38 43 48 @&t@
4 9 14 19 24 29 34 39 44 49 @&t@
5 10 15 20 25 30 35 40 45 50 @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_2d_numeric_int64.m],
[
try
    load test_write_2d_numeric.mat
    expdata = uint64(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 32-bit integer array])
AT_CHECK([$builddir/test_mat -v 5 -c int32 write_2d_numeric],[0],[],
         [])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 6 11 16 21 26 31 36 41 46 @&t@
2 7 12 17 22 27 32 37 42 47 @&t@
3 8 13 18 23 28 33 38 43 48 @&t@
4 9 14 19 24 29 34 39 44 49 @&t@
5 10 15 20 25 30 35 40 45 50 @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_2d_numeric_int32.m],
[
try
    load test_write_2d_numeric.mat
    expdata = int32(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 32-bit unsigned integer array])
AT_CHECK([$builddir/test_mat -v 5 -c uint32 write_2d_numeric],[0],[],
         [])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 6 11 16 21 26 31 36 41 46 @&t@
2 7 12 17 22 27 32 37 42 47 @&t@
3 8 13 18 23 28 33 38 43 48 @&t@
4 9 14 19 24 29 34 39 44 49 @&t@
5 10 15 20 25 30 35 40 45 50 @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_2d_numeric_int32.m],
[
try
    load test_write_2d_numeric.mat
    expdata = uint32(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 16-bit integer array])
AT_CHECK([$builddir/test_mat -v 5 -c int16 write_2d_numeric],[0],[],
         [])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 6 11 16 21 26 31 36 41 46 @&t@
2 7 12 17 22 27 32 37 42 47 @&t@
3 8 13 18 23 28 33 38 43 48 @&t@
4 9 14 19 24 29 34 39 44 49 @&t@
5 10 15 20 25 30 35 40 45 50 @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_2d_numeric_int16.m],
[
try
    load test_write_2d_numeric.mat
    expdata = int16(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 16-bit unsigned integer array])
AT_CHECK([$builddir/test_mat -v 5 -c uint16 write_2d_numeric],[0],[],
         [])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 6 11 16 21 26 31 36 41 46 @&t@
2 7 12 17 22 27 32 37 42 47 @&t@
3 8 13 18 23 28 33 38 43 48 @&t@
4 9 14 19 24 29 34 39 44 49 @&t@
5 10 15 20 25 30 35 40 45 50 @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_2d_numeric_int16.m],
[
try
    load test_write_2d_numeric.mat
    expdata = uint16(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 8-bit integer array])
AT_CHECK([$builddir/test_mat -v 5 -c int8 write_2d_numeric],[0],[],
         [])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 6 11 16 21 26 31 36 41 46 @&t@
2 7 12 17 22 27 32 37 42 47 @&t@
3 8 13 18 23 28 33 38 43 48 @&t@
4 9 14 19 24 29 34 39 44 49 @&t@
5 10 15 20 25 30 35 40 45 50 @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_2d_numeric_int8.m],
[
try
    load test_write_2d_numeric.mat
    expdata = int8(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 8-bit unsigned integer array])
AT_CHECK([$builddir/test_mat -v 5 -c uint8 write_2d_numeric],[0],[],
         [])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 6 11 16 21 26 31 36 41 46 @&t@
2 7 12 17 22 27 32 37 42 47 @&t@
3 8 13 18 23 28 33 38 43 48 @&t@
4 9 14 19 24 29 34 39 44 49 @&t@
5 10 15 20 25 30 35 40 45 50 @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_2d_numeric_int8.m],
[
try
    load test_write_2d_numeric.mat
    expdata = uint8(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D double-precision complex array])
AT_CHECK([$builddir/test_mat -v 5 -c double write_complex_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i @&t@
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i @&t@
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i @&t@
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i @&t@
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_complex_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_complex_2d_numeric_double.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = reshape((1:50) + j*(51:100),5,10);
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_double;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D single-precision complex array])
AT_CHECK([$builddir/test_mat -v 5 -c single write_complex_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i @&t@
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i @&t@
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i @&t@
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i @&t@
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_complex_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_complex_2d_numeric_single.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = single(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_single;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 64-bit integer complex array])
AT_SKIP_IF([test $HAVE_INT64 -eq 0])
AT_CHECK([$builddir/test_mat -v 5 -c int64 write_complex_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i @&t@
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i @&t@
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i @&t@
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i @&t@
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_complex_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_complex_2d_numeric_int64.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = int64(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int64;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 64-bit unsigned integer complex array])
AT_SKIP_IF([test $HAVE_UINT64 -eq 0])
AT_CHECK([$builddir/test_mat -v 5 -c uint64 write_complex_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i @&t@
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i @&t@
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i @&t@
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i @&t@
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_complex_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_complex_2d_numeric_uint64.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = uint64(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint64;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 32-bit integer complex array])
AT_CHECK([$builddir/test_mat -v 5 -c int32 write_complex_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i @&t@
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i @&t@
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i @&t@
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i @&t@
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_complex_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_complex_2d_numeric_int32.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = int32(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int32;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 32-bit unsigned integer complex array])
AT_CHECK([$builddir/test_mat -v 5 -c uint32 write_complex_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i @&t@
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i @&t@
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i @&t@
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i @&t@
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_complex_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_complex_2d_numeric_uint32.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = uint32(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint32;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 16-bit integer complex array])
AT_CHECK([$builddir/test_mat -v 5 -c int16 write_complex_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i @&t@
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i @&t@
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i @&t@
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i @&t@
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_complex_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_complex_2d_numeric_int16.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = int16(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int16;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 16-bit unsigned integer complex array])
AT_CHECK([$builddir/test_mat -v 5 -c uint16 write_complex_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i @&t@
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i @&t@
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i @&t@
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i @&t@
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_complex_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_complex_2d_numeric_uint16.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = uint16(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint16;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 8-bit integer complex array])
AT_CHECK([$builddir/test_mat -v 5 -c int8 write_complex_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i @&t@
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i @&t@
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i @&t@
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i @&t@
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_complex_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_complex_2d_numeric_int8.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = int8(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int8;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 8-bit unsigned integer complex array])
AT_CHECK([$builddir/test_mat -v 5 -c uint8 write_complex_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i @&t@
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i @&t@
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i @&t@
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i @&t@
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_complex_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_complex_2d_numeric_uint8.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = uint8(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint8;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D logical array])
AT_CHECK([$builddir/test_mat -v 5 write_2d_logical],[0],[],
         [])
MATIO_AT_HOST_DATA([expout],
[      Name: l1
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 1 0 1 0 1 0 1 0 1 @&t@
1 0 1 0 1 0 1 0 1 0 @&t@
0 1 0 1 0 1 0 1 0 1 @&t@
1 0 1 0 1 0 1 0 1 0 @&t@
0 1 0 1 0 1 0 1 0 1 @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_2d_logical.mat l1],[0],
         [expout],[])
MATIO_AT_HOST_DATA([expout],
[      Name: l2
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, unsigned integer array (logical)
 Data Type: 16-bit, unsigned integer
{
0 1 0 1 0 1 0 1 0 1 @&t@
1 0 1 0 1 0 1 0 1 0 @&t@
0 1 0 1 0 1 0 1 0 1 @&t@
1 0 1 0 1 0 1 0 1 0 @&t@
0 1 0 1 0 1 0 1 0 1 @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_2d_logical.mat l2],[0],
         [expout],[])
MATIO_AT_HOST_DATA([expout],
[      Name: l4
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, unsigned integer array (logical)
 Data Type: 32-bit, unsigned integer
{
0 1 0 1 0 1 0 1 0 1 @&t@
1 0 1 0 1 0 1 0 1 0 @&t@
0 1 0 1 0 1 0 1 0 1 @&t@
1 0 1 0 1 0 1 0 1 0 @&t@
0 1 0 1 0 1 0 1 0 1 @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_2d_logical.mat l4],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_2d_logical.m],
[
try
    load test_write_2d_logical.mat
    expdata.l0 = false(0,10);
    expdata.l1 = logical(mod(reshape(0:49,5,10),2));
    pass = true;
    pass = pass && isa(l0,class(expdata.l0));
    pass = pass && all(size(l0)==size(expdata.l0));
    pass = pass && all(l0(:)==expdata.l0(:));
    pass = pass && isa(l1,class(expdata.l1));
    pass = pass && all(size(l1)==size(expdata.l1));
    pass = pass && all(l1(:)==expdata.l1(:));
    pass = pass && isa(l2,class(expdata.l1));
    pass = pass && all(size(l2)==size(expdata.l1));
    pass = pass && all(l2(:)==expdata.l1(:));
    pass = pass && isa(l4,class(expdata.l1));
    pass = pass && all(size(l4)==size(expdata.l1));
    pass = pass && all(l4(:)==expdata.l1(:));
    if exist('l8','var')
        pass = pass && isa(l8,class(expdata.l1));
        pass = pass && all(size(l8)==size(expdata.l1));
        pass = pass && all(l8(:)==expdata.l1(:));
    end
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_logical;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D sparse double-precision array])
AT_CHECK([$builddir/test_mat -v 5 -c double write_sparse],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_sparse.mat sparse_matrix],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_sparse_double.m],
[
try
    load test_write_sparse.mat
    expdata = zeros(5,10);
    expdata(1:4:end,1:2:end) = 1;
    expdata(2:4,2:2:end) = 1;
    expdata = expdata.*reshape(1:50,5,10);
    pass = true;
    pass = pass && isa(sparse_matrix,class(expdata));
    pass = pass && issparse(sparse_matrix);
    pass = pass && all(size(sparse_matrix)==size(expdata));
    pass = pass && all(sparse_matrix(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_sparse_double;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D sparse complex double-precision array])
AT_CHECK([$builddir/test_mat -v 5 -c double write_complex_sparse],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix],
         [0],[expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_sparse_complex_double.m],
[
try
    load test_write_sparse_complex.mat
    expdata = zeros(5,10);
    expdata(1:4:end,1:2:end) = 1;
    expdata(2:4,2:2:end) = 1;
    expdata = expdata.*reshape((1:50) + j*(51:100),5,10);
    pass = true;
    pass = pass && isa(sparse_matrix,class(expdata));
    pass = pass && issparse(sparse_matrix);
    pass = pass && all(size(sparse_matrix)==size(expdata));
    pass = pass && all(sparse_matrix(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_sparse_complex_double;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D empty array])
AT_KEYWORDS([empty])
AT_CHECK([$builddir/test_mat -v 5 -c double write_empty_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: empty
      Rank: 2
Dimensions: 0 x 10
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_empty_2d_numeric.mat empty],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_empty.m],
[
try
    load test_write_empty_2d_numeric.mat
    expdata = zeros(0,10);
    pass = true;
    pass = pass && isa(empty,class(expdata));
    pass = pass && isempty(empty);
    pass = pass && all(size(empty)==size(expdata));
    pass = pass && all(empty(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_empty;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write character array])
AT_CHECK([$builddir/test_mat -v 5 write_char],[0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 4 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
1234567890!@#$%^&*()-_=+`~
@<:@{@:>@}\|;:'",<.>/?          @&t@
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_char.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_char.m],
[
try
    load test_write_char.mat
    expdata = @<:@'abcdefghijklmnopqrstuvwxyz';
               'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
               '1234567890!@#$%^&*()-_=+`~';
               '@<:@{@:>@}\|;:''",<.>/?          '@:>@;
    pass = true;
    pass = pass && isequal(expdata,a);
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_char;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write empty structure array])
AT_KEYWORDS([empty])
AT_CHECK([$builddir/test_mat -v 5 write_empty_struct],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: var1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@0@:>@ {
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_empty_struct.mat var1],[0],
         [expout],[])
MATIO_AT_HOST_DATA([expout],
[      Name: var2
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@2@:>@ {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_empty_struct.mat var2],[0],
         [expout],[])
MATIO_AT_HOST_DATA([expout],
[      Name: var3
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@2@:>@ {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_empty_struct.mat var3],[0],
         [expout],[])
MATIO_AT_HOST_DATA([expout],
[      Name: var4
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
{
}
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@0@:>@ {
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_empty_struct.mat var4],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_empty_struct.m],
[
try
    load test_write_empty_struct.mat
    expdata1 = repmat(struct,0,1);
    expdata2 = repmat(struct('field1',zeros(0,0),'field2',zeros(0,0)),0,1);
    expdata3 = struct('field1',zeros(0,1),'field2',zeros(0,1));
    expdata4(1).field1 = zeros(0,1);
    expdata4(1).field2 = repmat(' ',0,1);
    expdata4(2).field1 = repmat(struct,0,1);
    expdata4(2).field2 = repmat({zeros(0,0)},0,1);
    pass = true;
    pass = pass && isequal(var1,expdata1);
    pass = pass && isequal(var2,expdata2);
    pass = pass && isequal(var3,expdata3);
    pass = pass && isequal(var4,expdata4(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_empty_struct;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write structure array with 2D double-precision fields])
AT_CHECK([$builddir/test_mat -v 5 write_struct_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 4 7 10 @&t@
2 5 8 11 @&t@
3 6 9 12 @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
13 16 19 22 @&t@
14 17 20 23 @&t@
15 18 21 24 @&t@
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
25 28 31 34 @&t@
26 29 32 35 @&t@
27 30 33 36 @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
37 40 43 46 @&t@
38 41 44 47 @&t@
39 42 45 48 @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_struct_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_struct_2d_numeric.m],
[
try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape((1:12),3,4);
    expdata(1).field2 = reshape((13:24),3,4);
    expdata(2).field1 = reshape((25:36),3,4);
    expdata(2).field2 = reshape((37:48),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write structure array with 2D single-precision fields])
AT_CHECK([$builddir/test_mat -v 5 -c single write_struct_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 4 7 10 @&t@
2 5 8 11 @&t@
3 6 9 12 @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
13 16 19 22 @&t@
14 17 20 23 @&t@
15 18 21 24 @&t@
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
25 28 31 34 @&t@
26 29 32 35 @&t@
27 30 33 36 @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
37 40 43 46 @&t@
38 41 44 47 @&t@
39 42 45 48 @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_struct_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_struct_2d_numeric.m],
[
try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(single((1:12)),3,4);
    expdata(1).field2 = reshape(single((13:24)),3,4);
    expdata(2).field1 = reshape(single((25:36)),3,4);
    expdata(2).field2 = reshape(single((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 64-bit signed integer fields])
AT_SKIP_IF([test $HAVE_INT64 -eq 0])
AT_CHECK([$builddir/test_mat -v 5 -c int64 write_struct_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 4 7 10 @&t@
2 5 8 11 @&t@
3 6 9 12 @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
13 16 19 22 @&t@
14 17 20 23 @&t@
15 18 21 24 @&t@
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
25 28 31 34 @&t@
26 29 32 35 @&t@
27 30 33 36 @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
37 40 43 46 @&t@
38 41 44 47 @&t@
39 42 45 48 @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_struct_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_struct_2d_numeric.m],
[
try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int64((1:12)),3,4);
    expdata(1).field2 = reshape(int64((13:24)),3,4);
    expdata(2).field1 = reshape(int64((25:36)),3,4);
    expdata(2).field2 = reshape(int64((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 64-bit unsigned integer fields])
AT_SKIP_IF([test $HAVE_UINT64 -eq 0])
AT_CHECK([$builddir/test_mat -v 5 -c uint64 write_struct_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 4 7 10 @&t@
2 5 8 11 @&t@
3 6 9 12 @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
13 16 19 22 @&t@
14 17 20 23 @&t@
15 18 21 24 @&t@
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
25 28 31 34 @&t@
26 29 32 35 @&t@
27 30 33 36 @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
37 40 43 46 @&t@
38 41 44 47 @&t@
39 42 45 48 @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_struct_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_struct_2d_numeric.m],
[
try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint64((1:12)),3,4);
    expdata(1).field2 = reshape(uint64((13:24)),3,4);
    expdata(2).field1 = reshape(uint64((25:36)),3,4);
    expdata(2).field2 = reshape(uint64((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 32-bit signed integer fields])
AT_CHECK([$builddir/test_mat -v 5 -c int32 write_struct_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 4 7 10 @&t@
2 5 8 11 @&t@
3 6 9 12 @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
13 16 19 22 @&t@
14 17 20 23 @&t@
15 18 21 24 @&t@
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
25 28 31 34 @&t@
26 29 32 35 @&t@
27 30 33 36 @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
37 40 43 46 @&t@
38 41 44 47 @&t@
39 42 45 48 @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_struct_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_struct_2d_numeric.m],
[
try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int32((1:12)),3,4);
    expdata(1).field2 = reshape(int32((13:24)),3,4);
    expdata(2).field1 = reshape(int32((25:36)),3,4);
    expdata(2).field2 = reshape(int32((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 32-bit unsigned integer fields])
AT_CHECK([$builddir/test_mat -v 5 -c uint32 write_struct_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 4 7 10 @&t@
2 5 8 11 @&t@
3 6 9 12 @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
13 16 19 22 @&t@
14 17 20 23 @&t@
15 18 21 24 @&t@
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
25 28 31 34 @&t@
26 29 32 35 @&t@
27 30 33 36 @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
37 40 43 46 @&t@
38 41 44 47 @&t@
39 42 45 48 @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_struct_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_struct_2d_numeric.m],
[
try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint32((1:12)),3,4);
    expdata(1).field2 = reshape(uint32((13:24)),3,4);
    expdata(2).field1 = reshape(uint32((25:36)),3,4);
    expdata(2).field2 = reshape(uint32((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 16-bit signed integer fields])
AT_CHECK([$builddir/test_mat -v 5 -c int16 write_struct_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 4 7 10 @&t@
2 5 8 11 @&t@
3 6 9 12 @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
13 16 19 22 @&t@
14 17 20 23 @&t@
15 18 21 24 @&t@
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
25 28 31 34 @&t@
26 29 32 35 @&t@
27 30 33 36 @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
37 40 43 46 @&t@
38 41 44 47 @&t@
39 42 45 48 @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_struct_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_struct_2d_numeric.m],
[
try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int16((1:12)),3,4);
    expdata(1).field2 = reshape(int16((13:24)),3,4);
    expdata(2).field1 = reshape(int16((25:36)),3,4);
    expdata(2).field2 = reshape(int16((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 16-bit unsigned integer fields])
AT_CHECK([$builddir/test_mat -v 5 -c uint16 write_struct_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 4 7 10 @&t@
2 5 8 11 @&t@
3 6 9 12 @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
13 16 19 22 @&t@
14 17 20 23 @&t@
15 18 21 24 @&t@
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
25 28 31 34 @&t@
26 29 32 35 @&t@
27 30 33 36 @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
37 40 43 46 @&t@
38 41 44 47 @&t@
39 42 45 48 @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_struct_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_struct_2d_numeric.m],
[
try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint16((1:12)),3,4);
    expdata(1).field2 = reshape(uint16((13:24)),3,4);
    expdata(2).field1 = reshape(uint16((25:36)),3,4);
    expdata(2).field2 = reshape(uint16((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 8-bit signed integer fields])
AT_CHECK([$builddir/test_mat -v 5 -c int8 write_struct_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 4 7 10 @&t@
2 5 8 11 @&t@
3 6 9 12 @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
13 16 19 22 @&t@
14 17 20 23 @&t@
15 18 21 24 @&t@
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
25 28 31 34 @&t@
26 29 32 35 @&t@
27 30 33 36 @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
37 40 43 46 @&t@
38 41 44 47 @&t@
39 42 45 48 @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_struct_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_struct_2d_numeric.m],
[
try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int8((1:12)),3,4);
    expdata(1).field2 = reshape(int8((13:24)),3,4);
    expdata(2).field1 = reshape(int8((25:36)),3,4);
    expdata(2).field2 = reshape(int8((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 8-bit unsigned integer fields])
AT_CHECK([$builddir/test_mat -v 5 -c uint8 write_struct_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 4 7 10 @&t@
2 5 8 11 @&t@
3 6 9 12 @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
13 16 19 22 @&t@
14 17 20 23 @&t@
15 18 21 24 @&t@
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
25 28 31 34 @&t@
26 29 32 35 @&t@
27 30 33 36 @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
37 40 43 46 @&t@
38 41 44 47 @&t@
39 42 45 48 @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_struct_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_struct_2d_numeric.m],
[
try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint8((1:12)),3,4);
    expdata(1).field2 = reshape(uint8((13:24)),3,4);
    expdata(2).field1 = reshape(uint8((25:36)),3,4);
    expdata(2).field2 = reshape(uint8((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write structure array with 2D double-precision complex fields])
AT_CHECK([$builddir/test_mat -v 5 write_struct_complex_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i @&t@
2 + 52i 5 + 55i 8 + 58i 11 + 61i @&t@
3 + 53i 6 + 56i 9 + 59i 12 + 62i @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i @&t@
14 + 64i 17 + 67i 20 + 70i 23 + 73i @&t@
15 + 65i 18 + 68i 21 + 71i 24 + 74i @&t@
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i @&t@
26 + 76i 29 + 79i 32 + 82i 35 + 85i @&t@
27 + 77i 30 + 80i 33 + 83i 36 + 86i @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i @&t@
38 + 88i 41 + 91i 44 + 94i 47 + 97i @&t@
39 + 89i 42 + 92i 45 + 95i 48 + 98i @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a],
         [0],[expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_struct_complex_2d_numeric.m],
[
try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape((1:12) + j*(51:62),3,4);
    expdata(1).field2 = reshape((13:24) + j*(63:74),3,4);
    expdata(2).field1 = reshape((25:36) + j*(75:86),3,4);
    expdata(2).field2 = reshape((37:48) + j*(87:98),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write structure array with 2D single-precision complex fields])
AT_CHECK([$builddir/test_mat -v 5 -c single write_struct_complex_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i @&t@
2 + 52i 5 + 55i 8 + 58i 11 + 61i @&t@
3 + 53i 6 + 56i 9 + 59i 12 + 62i @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i @&t@
14 + 64i 17 + 67i 20 + 70i 23 + 73i @&t@
15 + 65i 18 + 68i 21 + 71i 24 + 74i @&t@
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i @&t@
26 + 76i 29 + 79i 32 + 82i 35 + 85i @&t@
27 + 77i 30 + 80i 33 + 83i 36 + 86i @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i @&t@
38 + 88i 41 + 91i 44 + 94i 47 + 97i @&t@
39 + 89i 42 + 92i 45 + 95i 48 + 98i @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a],
         [0],[expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_struct_complex_2d_numeric.m],
[
try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(single((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(single((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(single((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(single((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 64-bit signed integer complex fields])
AT_SKIP_IF([test $HAVE_INT64 -eq 0])
AT_CHECK([$builddir/test_mat -v 5 -c int64 write_struct_complex_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i @&t@
2 + 52i 5 + 55i 8 + 58i 11 + 61i @&t@
3 + 53i 6 + 56i 9 + 59i 12 + 62i @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i @&t@
14 + 64i 17 + 67i 20 + 70i 23 + 73i @&t@
15 + 65i 18 + 68i 21 + 71i 24 + 74i @&t@
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i @&t@
26 + 76i 29 + 79i 32 + 82i 35 + 85i @&t@
27 + 77i 30 + 80i 33 + 83i 36 + 86i @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i @&t@
38 + 88i 41 + 91i 44 + 94i 47 + 97i @&t@
39 + 89i 42 + 92i 45 + 95i 48 + 98i @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a],
         [0],[expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_struct_complex_2d_numeric.m],
[
try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int64((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int64((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int64((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int64((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 64-bit unsigned integer complex fields])
AT_SKIP_IF([test $HAVE_UINT64 -eq 0])
AT_CHECK([$builddir/test_mat -v 5 -c uint64 write_struct_complex_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i @&t@
2 + 52i 5 + 55i 8 + 58i 11 + 61i @&t@
3 + 53i 6 + 56i 9 + 59i 12 + 62i @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i @&t@
14 + 64i 17 + 67i 20 + 70i 23 + 73i @&t@
15 + 65i 18 + 68i 21 + 71i 24 + 74i @&t@
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i @&t@
26 + 76i 29 + 79i 32 + 82i 35 + 85i @&t@
27 + 77i 30 + 80i 33 + 83i 36 + 86i @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i @&t@
38 + 88i 41 + 91i 44 + 94i 47 + 97i @&t@
39 + 89i 42 + 92i 45 + 95i 48 + 98i @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a],
         [0],[expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_struct_complex_2d_numeric.m],
[
try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint64((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint64((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint64((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint64((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 32-bit signed integer complex fields])
AT_CHECK([$builddir/test_mat -v 5 -c int32 write_struct_complex_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i @&t@
2 + 52i 5 + 55i 8 + 58i 11 + 61i @&t@
3 + 53i 6 + 56i 9 + 59i 12 + 62i @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i @&t@
14 + 64i 17 + 67i 20 + 70i 23 + 73i @&t@
15 + 65i 18 + 68i 21 + 71i 24 + 74i @&t@
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i @&t@
26 + 76i 29 + 79i 32 + 82i 35 + 85i @&t@
27 + 77i 30 + 80i 33 + 83i 36 + 86i @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i @&t@
38 + 88i 41 + 91i 44 + 94i 47 + 97i @&t@
39 + 89i 42 + 92i 45 + 95i 48 + 98i @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a],
         [0],[expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_struct_complex_2d_numeric.m],
[
try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int32((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int32((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int32((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int32((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 32-bit unsigned integer complex fields])
AT_CHECK([$builddir/test_mat -v 5 -c uint32 write_struct_complex_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i @&t@
2 + 52i 5 + 55i 8 + 58i 11 + 61i @&t@
3 + 53i 6 + 56i 9 + 59i 12 + 62i @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i @&t@
14 + 64i 17 + 67i 20 + 70i 23 + 73i @&t@
15 + 65i 18 + 68i 21 + 71i 24 + 74i @&t@
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i @&t@
26 + 76i 29 + 79i 32 + 82i 35 + 85i @&t@
27 + 77i 30 + 80i 33 + 83i 36 + 86i @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i @&t@
38 + 88i 41 + 91i 44 + 94i 47 + 97i @&t@
39 + 89i 42 + 92i 45 + 95i 48 + 98i @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a],
         [0],[expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_struct_complex_2d_numeric.m],
[
try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint32((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint32((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint32((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint32((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 16-bit signed integer complex fields])
AT_CHECK([$builddir/test_mat -v 5 -c int16 write_struct_complex_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i @&t@
2 + 52i 5 + 55i 8 + 58i 11 + 61i @&t@
3 + 53i 6 + 56i 9 + 59i 12 + 62i @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i @&t@
14 + 64i 17 + 67i 20 + 70i 23 + 73i @&t@
15 + 65i 18 + 68i 21 + 71i 24 + 74i @&t@
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i @&t@
26 + 76i 29 + 79i 32 + 82i 35 + 85i @&t@
27 + 77i 30 + 80i 33 + 83i 36 + 86i @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i @&t@
38 + 88i 41 + 91i 44 + 94i 47 + 97i @&t@
39 + 89i 42 + 92i 45 + 95i 48 + 98i @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a],
         [0],[expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_struct_complex_2d_numeric.m],
[
try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int16((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int16((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int16((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int16((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 16-bit unsigned integer complex fields])
AT_CHECK([$builddir/test_mat -v 5 -c uint16 write_struct_complex_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i @&t@
2 + 52i 5 + 55i 8 + 58i 11 + 61i @&t@
3 + 53i 6 + 56i 9 + 59i 12 + 62i @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i @&t@
14 + 64i 17 + 67i 20 + 70i 23 + 73i @&t@
15 + 65i 18 + 68i 21 + 71i 24 + 74i @&t@
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i @&t@
26 + 76i 29 + 79i 32 + 82i 35 + 85i @&t@
27 + 77i 30 + 80i 33 + 83i 36 + 86i @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i @&t@
38 + 88i 41 + 91i 44 + 94i 47 + 97i @&t@
39 + 89i 42 + 92i 45 + 95i 48 + 98i @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a],
         [0],[expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_struct_complex_2d_numeric.m],
[
try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint16((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint16((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint16((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint16((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 8-bit signed integer complex fields])
AT_CHECK([$builddir/test_mat -v 5 -c int8 write_struct_complex_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i @&t@
2 + 52i 5 + 55i 8 + 58i 11 + 61i @&t@
3 + 53i 6 + 56i 9 + 59i 12 + 62i @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i @&t@
14 + 64i 17 + 67i 20 + 70i 23 + 73i @&t@
15 + 65i 18 + 68i 21 + 71i 24 + 74i @&t@
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i @&t@
26 + 76i 29 + 79i 32 + 82i 35 + 85i @&t@
27 + 77i 30 + 80i 33 + 83i 36 + 86i @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i @&t@
38 + 88i 41 + 91i 44 + 94i 47 + 97i @&t@
39 + 89i 42 + 92i 45 + 95i 48 + 98i @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a],
         [0],[expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_struct_complex_2d_numeric.m],
[
try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int8((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int8((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int8((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int8((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 8-bit unsigned integer complex fields])
AT_CHECK([$builddir/test_mat -v 5 -c uint8 write_struct_complex_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i @&t@
2 + 52i 5 + 55i 8 + 58i 11 + 61i @&t@
3 + 53i 6 + 56i 9 + 59i 12 + 62i @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i @&t@
14 + 64i 17 + 67i 20 + 70i 23 + 73i @&t@
15 + 65i 18 + 68i 21 + 71i 24 + 74i @&t@
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i @&t@
26 + 76i 29 + 79i 32 + 82i 35 + 85i @&t@
27 + 77i 30 + 80i 33 + 83i 36 + 86i @&t@
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i @&t@
38 + 88i 41 + 91i 44 + 94i 47 + 97i @&t@
39 + 89i 42 + 92i 45 + 95i 48 + 98i @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a],
         [0],[expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_struct_complex_2d_numeric.m],
[
try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint8((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint8((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint8((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint8((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write structure array with 2D logical fields])
AT_CHECK([$builddir/test_mat -v 5 write_struct_2d_logical],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, unsigned integer array (logical)
 Data Type: 32-bit, unsigned integer
{
0 1 0 1 0 1 0 1 0 1 @&t@
1 0 1 0 1 0 1 0 1 0 @&t@
0 1 0 1 0 1 0 1 0 1 @&t@
1 0 1 0 1 0 1 0 1 0 @&t@
0 1 0 1 0 1 0 1 0 1 @&t@
}
      Name: field2
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, unsigned integer array (logical)
 Data Type: 16-bit, unsigned integer
{
1 0 1 0 1 0 1 0 1 0 @&t@
0 1 0 1 0 1 0 1 0 1 @&t@
1 0 1 0 1 0 1 0 1 0 @&t@
0 1 0 1 0 1 0 1 0 1 @&t@
1 0 1 0 1 0 1 0 1 0 @&t@
}
      Name: field1
      Rank: 2
Dimensions: 0 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
}
      Name: field2
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 @&t@
1 1 0 0 0 @&t@
1 1 1 0 0 @&t@
1 1 1 1 0 @&t@
1 1 1 1 1 @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_struct_2d_logical.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_struct_2d_logical.m],
[
try
    load test_write_struct_2d_logical.mat
    expdata(1).field1 = logical(mod(reshape(0:49,5,10),2));
    expdata(1).field2 = ~expdata(1).field1;
    expdata(2).field1 = false(0,5);
    expdata(2).field2 = tril(true(5));
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_logical;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write structure array with character fields])
AT_KEYWORDS([bug30])
AT_CHECK([$builddir/test_mat -v 5 write_struct_char],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields@<:@4@:>@ {
      Name: field1
      Rank: 2
Dimensions: 0 x 0
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Name: field2
      Rank: 2
Dimensions: 0 x 0
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Name: field1
      Rank: 2
Dimensions: 0 x 0
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Name: field2
      Rank: 2
Dimensions: 4 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
1234567890!@#$%^&*()-_=+`~
@<:@{@:>@}\|;:'",<.>/?          @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_struct_char.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_struct_char.m],
[
try
    load test_write_struct_char.mat
    expdata(1).field1 = [];
    expdata(1).field2 = [];
    expdata(2).field1 = [];
    expdata(2).field2 = @<:@'abcdefghijklmnopqrstuvwxyz';
               'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
               '1234567890!@#$%^&*()-_=+`~';
               '@<:@{@:>@}\|;:''",<.>/?          '@:>@;
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_char;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write empty cell array])
AT_KEYWORDS([empty])
AT_CHECK([$builddir/test_mat -v 5 write_empty_cell],[0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: var1
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_empty_cell.mat var1],[0],
         [expout],[])
MATIO_AT_HOST_DATA([expout],
[      Name: var2
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_empty_cell.mat var2],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_empty_cell.m],
[
try
    load test_write_empty_cell.mat
    expdata1 = cell(0,1);
    expdata2 = {zeros(0,1);zeros(0,1)};
    pass = true;
    pass = pass && isequal(var1,expdata1);
    pass = pass && isequal(var2,expdata2);
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_empty_cell;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write cell array with 2D double-precision fields])
AT_CHECK([$builddir/test_mat -v 5 write_cell_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 4 7 10 @&t@
2 5 8 11 @&t@
3 6 9 12 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
13 16 19 22 @&t@
14 17 20 23 @&t@
15 18 21 24 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
25 28 31 34 @&t@
26 29 32 35 @&t@
27 30 33 36 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
37 40 43 46 @&t@
38 41 44 47 @&t@
39 42 45 48 @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_cell_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_cell_2d_numeric.m],
[
try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape((1:12),3,4);reshape((13:24),3,4);...
               reshape((25:36),3,4);reshape((37:48),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write cell array with 2D single-precision fields])
AT_CHECK([$builddir/test_mat -v 5 -c single write_cell_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 4 7 10 @&t@
2 5 8 11 @&t@
3 6 9 12 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
13 16 19 22 @&t@
14 17 20 23 @&t@
15 18 21 24 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
25 28 31 34 @&t@
26 29 32 35 @&t@
27 30 33 36 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
37 40 43 46 @&t@
38 41 44 47 @&t@
39 42 45 48 @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_cell_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_cell_2d_numeric.m],
[
try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(single((1:12)),3,4);reshape(single((13:24)),3,4);...
               reshape(single((25:36)),3,4);reshape(single((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 64-bit signed integer fields])
AT_SKIP_IF([test $HAVE_INT64 -eq 0])
AT_CHECK([$builddir/test_mat -v 5 -c int64 write_cell_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 4 7 10 @&t@
2 5 8 11 @&t@
3 6 9 12 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
13 16 19 22 @&t@
14 17 20 23 @&t@
15 18 21 24 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
25 28 31 34 @&t@
26 29 32 35 @&t@
27 30 33 36 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
37 40 43 46 @&t@
38 41 44 47 @&t@
39 42 45 48 @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_cell_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_cell_2d_numeric.m],
[
try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int64((1:12)),3,4);reshape(int64((13:24)),3,4);...
               reshape(int64((25:36)),3,4);reshape(int64((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 64-bit unsigned integer fields])
AT_SKIP_IF([test $HAVE_UINT64 -eq 0])
AT_CHECK([$builddir/test_mat -v 5 -c uint64 write_cell_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 4 7 10 @&t@
2 5 8 11 @&t@
3 6 9 12 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
13 16 19 22 @&t@
14 17 20 23 @&t@
15 18 21 24 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
25 28 31 34 @&t@
26 29 32 35 @&t@
27 30 33 36 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
37 40 43 46 @&t@
38 41 44 47 @&t@
39 42 45 48 @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_cell_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_cell_2d_numeric.m],
[
try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint64((1:12)),3,4);reshape(uint64((13:24)),3,4);...
               reshape(uint64((25:36)),3,4);reshape(uint64((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 32-bit signed integer fields])
AT_CHECK([$builddir/test_mat -v 5 -c int32 write_cell_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 4 7 10 @&t@
2 5 8 11 @&t@
3 6 9 12 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
13 16 19 22 @&t@
14 17 20 23 @&t@
15 18 21 24 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
25 28 31 34 @&t@
26 29 32 35 @&t@
27 30 33 36 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
37 40 43 46 @&t@
38 41 44 47 @&t@
39 42 45 48 @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_cell_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_cell_2d_numeric.m],
[
try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int32((1:12)),3,4);reshape(int32((13:24)),3,4);...
               reshape(int32((25:36)),3,4);reshape(int32((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 32-bit unsigned integer fields])
AT_CHECK([$builddir/test_mat -v 5 -c uint32 write_cell_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 4 7 10 @&t@
2 5 8 11 @&t@
3 6 9 12 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
13 16 19 22 @&t@
14 17 20 23 @&t@
15 18 21 24 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
25 28 31 34 @&t@
26 29 32 35 @&t@
27 30 33 36 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
37 40 43 46 @&t@
38 41 44 47 @&t@
39 42 45 48 @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_cell_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_cell_2d_numeric.m],
[
try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint32((1:12)),3,4);reshape(uint32((13:24)),3,4);...
               reshape(uint32((25:36)),3,4);reshape(uint32((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 16-bit signed integer fields])
AT_CHECK([$builddir/test_mat -v 5 -c int16 write_cell_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 4 7 10 @&t@
2 5 8 11 @&t@
3 6 9 12 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
13 16 19 22 @&t@
14 17 20 23 @&t@
15 18 21 24 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
25 28 31 34 @&t@
26 29 32 35 @&t@
27 30 33 36 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
37 40 43 46 @&t@
38 41 44 47 @&t@
39 42 45 48 @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_cell_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_cell_2d_numeric.m],
[
try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int16((1:12)),3,4);reshape(int16((13:24)),3,4);...
               reshape(int16((25:36)),3,4);reshape(int16((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 16-bit unsigned integer fields])
AT_CHECK([$builddir/test_mat -v 5 -c uint16 write_cell_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 4 7 10 @&t@
2 5 8 11 @&t@
3 6 9 12 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
13 16 19 22 @&t@
14 17 20 23 @&t@
15 18 21 24 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
25 28 31 34 @&t@
26 29 32 35 @&t@
27 30 33 36 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
37 40 43 46 @&t@
38 41 44 47 @&t@
39 42 45 48 @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_cell_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_cell_2d_numeric.m],
[
try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint16((1:12)),3,4);reshape(uint16((13:24)),3,4);...
               reshape(uint16((25:36)),3,4);reshape(uint16((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 8-bit signed integer fields])
AT_CHECK([$builddir/test_mat -v 5 -c int8 write_cell_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 4 7 10 @&t@
2 5 8 11 @&t@
3 6 9 12 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
13 16 19 22 @&t@
14 17 20 23 @&t@
15 18 21 24 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
25 28 31 34 @&t@
26 29 32 35 @&t@
27 30 33 36 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
37 40 43 46 @&t@
38 41 44 47 @&t@
39 42 45 48 @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_cell_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_cell_2d_numeric.m],
[
try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int8((1:12)),3,4);reshape(int8((13:24)),3,4);...
               reshape(int8((25:36)),3,4);reshape(int8((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 8-bit unsigned integer fields])
AT_CHECK([$builddir/test_mat -v 5 -c uint8 write_cell_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 4 7 10 @&t@
2 5 8 11 @&t@
3 6 9 12 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
13 16 19 22 @&t@
14 17 20 23 @&t@
15 18 21 24 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
25 28 31 34 @&t@
26 29 32 35 @&t@
27 30 33 36 @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
37 40 43 46 @&t@
38 41 44 47 @&t@
39 42 45 48 @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_cell_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_cell_2d_numeric.m],
[
try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint8((1:12)),3,4);reshape(uint8((13:24)),3,4);...
               reshape(uint8((25:36)),3,4);reshape(uint8((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write cell array with 2D double-precision complex fields])
AT_CHECK([$builddir/test_mat -v 5 write_cell_complex_2d_numeric],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i @&t@
2 + 52i 5 + 55i 8 + 58i 11 + 61i @&t@
3 + 53i 6 + 56i 9 + 59i 12 + 62i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i @&t@
14 + 64i 17 + 67i 20 + 70i 23 + 73i @&t@
15 + 65i 18 + 68i 21 + 71i 24 + 74i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i @&t@
26 + 76i 29 + 79i 32 + 82i 35 + 85i @&t@
27 + 77i 30 + 80i 33 + 83i 36 + 86i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i @&t@
38 + 88i 41 + 91i 44 + 94i 47 + 97i @&t@
39 + 89i 42 + 92i 45 + 95i 48 + 98i @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a],
         [0],[expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_cell_complex_2d_numeric.m],
[
try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape((1:12)+j*(51:62),3,4);...
               reshape((13:24)+j*(63:74),3,4);...
               reshape((25:36)+j*(75:86),3,4);...
               reshape((37:48)+j*(87:98),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write cell array with 2D single-precision complex fields])
AT_CHECK([$builddir/test_mat -v 5 -c single write_cell_complex_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i @&t@
2 + 52i 5 + 55i 8 + 58i 11 + 61i @&t@
3 + 53i 6 + 56i 9 + 59i 12 + 62i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i @&t@
14 + 64i 17 + 67i 20 + 70i 23 + 73i @&t@
15 + 65i 18 + 68i 21 + 71i 24 + 74i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i @&t@
26 + 76i 29 + 79i 32 + 82i 35 + 85i @&t@
27 + 77i 30 + 80i 33 + 83i 36 + 86i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i @&t@
38 + 88i 41 + 91i 44 + 94i 47 + 97i @&t@
39 + 89i 42 + 92i 45 + 95i 48 + 98i @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a],
         [0],[expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_cell_complex_2d_numeric.m],
[
try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(single((1:12)+j*(51:62)),3,4);...
               reshape(single((13:24)+j*(63:74)),3,4);...
               reshape(single((25:36)+j*(75:86)),3,4);...
               reshape(single((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 64-bit signed integer complex fields])
AT_SKIP_IF([test $HAVE_INT64 -eq 0])
AT_CHECK([$builddir/test_mat -v 5 -c int64 write_cell_complex_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i @&t@
2 + 52i 5 + 55i 8 + 58i 11 + 61i @&t@
3 + 53i 6 + 56i 9 + 59i 12 + 62i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i @&t@
14 + 64i 17 + 67i 20 + 70i 23 + 73i @&t@
15 + 65i 18 + 68i 21 + 71i 24 + 74i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i @&t@
26 + 76i 29 + 79i 32 + 82i 35 + 85i @&t@
27 + 77i 30 + 80i 33 + 83i 36 + 86i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i @&t@
38 + 88i 41 + 91i 44 + 94i 47 + 97i @&t@
39 + 89i 42 + 92i 45 + 95i 48 + 98i @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a],
         [0],[expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_cell_complex_2d_numeric.m],
[
try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int64((1:12)+j*(51:62)),3,4);...
               reshape(int64((13:24)+j*(63:74)),3,4);...
               reshape(int64((25:36)+j*(75:86)),3,4);...
               reshape(int64((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 64-bit unsigned integer complex fields])
AT_SKIP_IF([test $HAVE_UINT64 -eq 0])
AT_CHECK([$builddir/test_mat -v 5 -c uint64 write_cell_complex_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i @&t@
2 + 52i 5 + 55i 8 + 58i 11 + 61i @&t@
3 + 53i 6 + 56i 9 + 59i 12 + 62i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i @&t@
14 + 64i 17 + 67i 20 + 70i 23 + 73i @&t@
15 + 65i 18 + 68i 21 + 71i 24 + 74i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i @&t@
26 + 76i 29 + 79i 32 + 82i 35 + 85i @&t@
27 + 77i 30 + 80i 33 + 83i 36 + 86i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i @&t@
38 + 88i 41 + 91i 44 + 94i 47 + 97i @&t@
39 + 89i 42 + 92i 45 + 95i 48 + 98i @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a],
         [0],[expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_cell_complex_2d_numeric.m],
[
try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint64((1:12)+j*(51:62)),3,4);...
               reshape(uint64((13:24)+j*(63:74)),3,4);...
               reshape(uint64((25:36)+j*(75:86)),3,4);...
               reshape(uint64((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 32-bit signed integer complex fields])
AT_CHECK([$builddir/test_mat -v 5 -c int32 write_cell_complex_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i @&t@
2 + 52i 5 + 55i 8 + 58i 11 + 61i @&t@
3 + 53i 6 + 56i 9 + 59i 12 + 62i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i @&t@
14 + 64i 17 + 67i 20 + 70i 23 + 73i @&t@
15 + 65i 18 + 68i 21 + 71i 24 + 74i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i @&t@
26 + 76i 29 + 79i 32 + 82i 35 + 85i @&t@
27 + 77i 30 + 80i 33 + 83i 36 + 86i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i @&t@
38 + 88i 41 + 91i 44 + 94i 47 + 97i @&t@
39 + 89i 42 + 92i 45 + 95i 48 + 98i @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a],
         [0],[expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_cell_complex_2d_numeric.m],
[
try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int32((1:12)+j*(51:62)),3,4);...
               reshape(int32((13:24)+j*(63:74)),3,4);...
               reshape(int32((25:36)+j*(75:86)),3,4);...
               reshape(int32((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 32-bit unsigned integer complex fields])
AT_CHECK([$builddir/test_mat -v 5 -c uint32 write_cell_complex_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i @&t@
2 + 52i 5 + 55i 8 + 58i 11 + 61i @&t@
3 + 53i 6 + 56i 9 + 59i 12 + 62i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i @&t@
14 + 64i 17 + 67i 20 + 70i 23 + 73i @&t@
15 + 65i 18 + 68i 21 + 71i 24 + 74i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i @&t@
26 + 76i 29 + 79i 32 + 82i 35 + 85i @&t@
27 + 77i 30 + 80i 33 + 83i 36 + 86i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i @&t@
38 + 88i 41 + 91i 44 + 94i 47 + 97i @&t@
39 + 89i 42 + 92i 45 + 95i 48 + 98i @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a],
         [0],[expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_cell_complex_2d_numeric.m],
[
try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint32((1:12)+j*(51:62)),3,4);...
               reshape(uint32((13:24)+j*(63:74)),3,4);...
               reshape(uint32((25:36)+j*(75:86)),3,4);...
               reshape(uint32((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 16-bit signed integer complex fields])
AT_CHECK([$builddir/test_mat -v 5 -c int16 write_cell_complex_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i @&t@
2 + 52i 5 + 55i 8 + 58i 11 + 61i @&t@
3 + 53i 6 + 56i 9 + 59i 12 + 62i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i @&t@
14 + 64i 17 + 67i 20 + 70i 23 + 73i @&t@
15 + 65i 18 + 68i 21 + 71i 24 + 74i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i @&t@
26 + 76i 29 + 79i 32 + 82i 35 + 85i @&t@
27 + 77i 30 + 80i 33 + 83i 36 + 86i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i @&t@
38 + 88i 41 + 91i 44 + 94i 47 + 97i @&t@
39 + 89i 42 + 92i 45 + 95i 48 + 98i @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a],
         [0],[expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_cell_complex_2d_numeric.m],
[
try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int16((1:12)+j*(51:62)),3,4);...
               reshape(int16((13:24)+j*(63:74)),3,4);...
               reshape(int16((25:36)+j*(75:86)),3,4);...
               reshape(int16((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 16-bit unsigned integer complex fields])
AT_CHECK([$builddir/test_mat -v 5 -c uint16 write_cell_complex_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i @&t@
2 + 52i 5 + 55i 8 + 58i 11 + 61i @&t@
3 + 53i 6 + 56i 9 + 59i 12 + 62i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i @&t@
14 + 64i 17 + 67i 20 + 70i 23 + 73i @&t@
15 + 65i 18 + 68i 21 + 71i 24 + 74i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i @&t@
26 + 76i 29 + 79i 32 + 82i 35 + 85i @&t@
27 + 77i 30 + 80i 33 + 83i 36 + 86i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i @&t@
38 + 88i 41 + 91i 44 + 94i 47 + 97i @&t@
39 + 89i 42 + 92i 45 + 95i 48 + 98i @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a],
         [0],[expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_cell_complex_2d_numeric.m],
[
try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint16((1:12)+j*(51:62)),3,4);...
               reshape(uint16((13:24)+j*(63:74)),3,4);...
               reshape(uint16((25:36)+j*(75:86)),3,4);...
               reshape(uint16((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 8-bit signed integer complex fields])
AT_CHECK([$builddir/test_mat -v 5 -c int8 write_cell_complex_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i @&t@
2 + 52i 5 + 55i 8 + 58i 11 + 61i @&t@
3 + 53i 6 + 56i 9 + 59i 12 + 62i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i @&t@
14 + 64i 17 + 67i 20 + 70i 23 + 73i @&t@
15 + 65i 18 + 68i 21 + 71i 24 + 74i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i @&t@
26 + 76i 29 + 79i 32 + 82i 35 + 85i @&t@
27 + 77i 30 + 80i 33 + 83i 36 + 86i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i @&t@
38 + 88i 41 + 91i 44 + 94i 47 + 97i @&t@
39 + 89i 42 + 92i 45 + 95i 48 + 98i @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a],
         [0],[expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_cell_complex_2d_numeric.m],
[
try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int8((1:12)+j*(51:62)),3,4);...
               reshape(int8((13:24)+j*(63:74)),3,4);...
               reshape(int8((25:36)+j*(75:86)),3,4);...
               reshape(int8((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 8-bit unsigned integer complex fields])
AT_CHECK([$builddir/test_mat -v 5 -c uint8 write_cell_complex_2d_numeric],
         [0],[],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i @&t@
2 + 52i 5 + 55i 8 + 58i 11 + 61i @&t@
3 + 53i 6 + 56i 9 + 59i 12 + 62i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i @&t@
14 + 64i 17 + 67i 20 + 70i 23 + 73i @&t@
15 + 65i 18 + 68i 21 + 71i 24 + 74i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i @&t@
26 + 76i 29 + 79i 32 + 82i 35 + 85i @&t@
27 + 77i 30 + 80i 33 + 83i 36 + 86i @&t@
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i @&t@
38 + 88i 41 + 91i 44 + 94i 47 + 97i @&t@
39 + 89i 42 + 92i 45 + 95i 48 + 98i @&t@
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a],
         [0],[expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_cell_complex_2d_numeric.m],
[
try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint8((1:12)+j*(51:62)),3,4);...
               reshape(uint8((13:24)+j*(63:74)),3,4);...
               reshape(uint8((25:36)+j*(75:86)),3,4);...
               reshape(uint8((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write cell array with 2D logical fields])
AT_CHECK([$builddir/test_mat -v 5 write_cell_2d_logical],[0],
         [],[])
MATIO_AT_HOST_DATA([expout],
[      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 5 x 5
Class Type: 32-bit, unsigned integer array (logical)
 Data Type: 32-bit, unsigned integer
{
1 1 1 1 1 @&t@
0 1 1 1 1 @&t@
0 0 1 1 1 @&t@
0 0 0 1 1 @&t@
0 0 0 0 1 @&t@
}
      Rank: 2
Dimensions: 5 x 5
Class Type: 16-bit, unsigned integer array (logical)
 Data Type: 16-bit, unsigned integer
{
1 0 0 0 0 @&t@
1 1 0 0 0 @&t@
1 1 1 0 0 @&t@
1 1 1 1 0 @&t@
1 1 1 1 1 @&t@
}
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 @&t@
0 1 0 0 0 @&t@
0 0 1 0 0 @&t@
0 0 0 1 0 @&t@
0 0 0 0 1 @&t@
}
      Rank: 2
Dimensions: 0 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
}
}
],[])
AT_CHECK([$builddir/test_mat readvar test_write_cell_2d_logical.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_cell_2d_logical.m],
[
try
    load test_write_cell_2d_logical.mat
    expdata = {triu(true(5));tril(true(5));logical(eye(5));false(0,5)};
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_logical;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP
