# Copyright (C) 2010-2016   Christopher C. Hulbert
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY CHRISTOPHER C. HULBERT ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL CHRISTOPHER C. HULBERT OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

AT_SETUP([Write 2D double-precision array])
AT_CHECK([$builddir/test_mat -v 4 -c double write_2d_numeric],[0],[],
         [])
AT_CHECK([cp $srcdir/results/write_2d_numeric-double.out expout
          $builddir/test_mat readvar test_write_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_2d_numeric_double.m],
[
try
    load test_write_2d_numeric.mat
    expdata = reshape(1:50,5,10);
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_double;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D single-precision array])
AT_CHECK([$builddir/test_mat -v 4 -c single write_2d_numeric],[0],[],
         [])
AT_CHECK([cp $srcdir/results/write_2d_numeric-double.out expout
          $builddir/test_mat readvar test_write_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_2d_numeric_single.m],
[
try
    load test_write_2d_numeric.mat
    expdata = single(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_single;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 32-bit integer array])
AT_CHECK([$builddir/test_mat -v 4 -c int32 write_2d_numeric],[0],[],
         [])
AT_CHECK([cp $srcdir/results/write_2d_numeric-double.out expout
          $builddir/test_mat readvar test_write_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_2d_numeric_int32.m],
[
try
    load test_write_2d_numeric.mat
    expdata = int32(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 16-bit integer array])
AT_CHECK([$builddir/test_mat -v 4 -c int16 write_2d_numeric],[0],[],
         [])
AT_CHECK([cp $srcdir/results/write_2d_numeric-double.out expout
          $builddir/test_mat readvar test_write_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_2d_numeric_int16.m],
[
try
    load test_write_2d_numeric.mat
    expdata = int16(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 16-bit unsigned integer array])
AT_CHECK([$builddir/test_mat -v 4 -c uint16 write_2d_numeric],[0],[],
         [])
AT_CHECK([cp $srcdir/results/write_2d_numeric-double.out expout
          $builddir/test_mat readvar test_write_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_2d_numeric_int16.m],
[
try
    load test_write_2d_numeric.mat
    expdata = uint16(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 8-bit unsigned integer array])
AT_CHECK([$builddir/test_mat -v 4 -c uint8 write_2d_numeric],[0],[],
         [])
AT_CHECK([cp $srcdir/results/write_2d_numeric-double.out expout
          $builddir/test_mat readvar test_write_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_2d_numeric_int8.m],
[
try
    load test_write_2d_numeric.mat
    expdata = uint8(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D double-precision complex array])
AT_CHECK([$builddir/test_mat -v 4 -c double write_complex_2d_numeric],[0],
         [],[])
AT_CHECK([cp $srcdir/results/write_complex_2d_numeric-double.out expout
          $builddir/test_mat readvar test_write_complex_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_complex_2d_numeric_double.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = reshape((1:50) + j*(51:100),5,10);
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_double;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D single-precision complex array])
AT_CHECK([$builddir/test_mat -v 4 -c single write_complex_2d_numeric],[0],
         [],[])
AT_CHECK([cp $srcdir/results/write_complex_2d_numeric-double.out expout
          $builddir/test_mat readvar test_write_complex_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_complex_2d_numeric_single.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = single(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_single;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 32-bit integer complex array])
AT_CHECK([$builddir/test_mat -v 4 -c int32 write_complex_2d_numeric],[0],
         [],[])
AT_CHECK([cp $srcdir/results/write_complex_2d_numeric-double.out expout
          $builddir/test_mat readvar test_write_complex_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_complex_2d_numeric_int32.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = int32(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int32;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 16-bit integer complex array])
AT_CHECK([$builddir/test_mat -v 4 -c int16 write_complex_2d_numeric],[0],
         [],[])
AT_CHECK([cp $srcdir/results/write_complex_2d_numeric-double.out expout
          $builddir/test_mat readvar test_write_complex_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_complex_2d_numeric_int16.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = int16(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int16;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 16-bit unsigned integer complex array])
AT_CHECK([$builddir/test_mat -v 4 -c uint16 write_complex_2d_numeric],[0],
         [],[])
AT_CHECK([cp $srcdir/results/write_complex_2d_numeric-double.out expout
          $builddir/test_mat readvar test_write_complex_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_complex_2d_numeric_uint16.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = uint16(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint16;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D 8-bit unsigned integer complex array])
AT_CHECK([$builddir/test_mat -v 4 -c uint8 write_complex_2d_numeric],[0],
         [],[])
AT_CHECK([cp $srcdir/results/write_complex_2d_numeric-double.out expout
          $builddir/test_mat readvar test_write_complex_2d_numeric.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_complex_2d_numeric_uint8.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = uint8(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint8;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D sparse double-precision array])
AT_CHECK([$builddir/test_mat -v 4 -c double write_sparse],[0],
         [],[])
AT_CHECK([cp $srcdir/results/readvar-write_sparse-sparse_matrix-double.out expout
          $builddir/test_mat readvar test_write_sparse.mat sparse_matrix],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_sparse_double.m],
[
try
    load test_write_sparse.mat
    expdata = zeros(5,10);
    expdata(1:4:end,1:2:end) = 1;
    expdata(2:4,2:2:end) = 1;
    expdata = expdata.*reshape(1:50,5,10);
    pass = true;
    pass = pass && isa(sparse_matrix,class(expdata));
    pass = pass && issparse(sparse_matrix);
    pass = pass && all(size(sparse_matrix)==size(expdata));
    pass = pass && all(sparse_matrix(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_sparse_double;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D sparse complex double-precision array])
AT_CHECK([$builddir/test_mat -v 4 -c double write_complex_sparse],[0],
         [],[])
AT_CHECK([cp $srcdir/results/readvar-write_complex_sparse-sparse_matrix-double.out expout
          $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix],
         [0],[expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_sparse_complex_double.m],
[
try
    load test_write_sparse_complex.mat
    expdata = zeros(5,10);
    expdata(1:4:end,1:2:end) = 1;
    expdata(2:4,2:2:end) = 1;
    expdata = expdata.*reshape((1:50) + j*(51:100),5,10);
    pass = true;
    pass = pass && isa(sparse_matrix,class(expdata));
    pass = pass && issparse(sparse_matrix);
    pass = pass && all(size(sparse_matrix)==size(expdata));
    pass = pass && all(sparse_matrix(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_sparse_complex_double;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write 2D empty array])
AT_KEYWORDS([empty])
AT_CHECK([$builddir/test_mat -v 4 -c double write_empty_2d_numeric],[0],
         [],[])
AT_CHECK([cp $srcdir/results/readvar-write_empty_2d_numeric-empty.out expout
          $builddir/test_mat readvar test_write_empty_2d_numeric.mat empty],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_empty.m],
[
try
    load test_write_empty_2d_numeric.mat
    expdata = zeros(0,10);
    pass = true;
    pass = pass && isa(empty,class(expdata));
    pass = pass && isempty(empty);
    pass = pass && all(size(empty)==size(expdata));
    pass = pass && all(empty(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_empty;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP

AT_SETUP([Write character array])
AT_CHECK([$builddir/test_mat -v 4 write_char],[0],[],[])
AT_CHECK([cp $srcdir/results/readvar-write_char-a.out expout
          $builddir/test_mat readvar test_write_char.mat a],[0],
         [expout],[])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_DATA([test_write_char.m],
[
try
    load test_write_char.mat
    expdata = @<:@'abcdefghijklmnopqrstuvwxyz';
               'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
               '1234567890!@#$%^&*()-_=+`~';
               '@<:@{@:>@}\|;:''",<.>/?          '@:>@;
    pass = true;
    pass = pass && isequal(expdata,a);
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_char;exit' | $GREP PASSED],[0],[PASSED
],[])
AT_CLEANUP
